// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:meng_guo/function/detail/entity/detail_comment_resp_entity.dart';
import 'package:meng_guo/generated/json/detail_comment_resp_entity_helper.dart';
import 'package:meng_guo/function/detail/entity/detail_info_resp_entity.dart';
import 'package:meng_guo/generated/json/detail_info_resp_entity_helper.dart';
import 'package:meng_guo/function/discover/entity/discover_toptip_resp_entity.dart';
import 'package:meng_guo/generated/json/discover_toptip_resp_entity_helper.dart';
import 'package:meng_guo/function/home/entity/emoji_list_resp_entity.dart';
import 'package:meng_guo/generated/json/emoji_list_resp_entity_helper.dart';
import 'package:meng_guo/function/home/entity/home_category_list_resp_entity.dart';
import 'package:meng_guo/generated/json/home_category_list_resp_entity_helper.dart';
import 'package:meng_guo/function/home/entity/home_list_req_entity.dart';
import 'package:meng_guo/generated/json/home_list_req_entity_helper.dart';
import 'package:meng_guo/function/home/entity/home_list_resp_entity.dart';
import 'package:meng_guo/generated/json/home_list_resp_entity_helper.dart';
import 'package:meng_guo/function/login/entity/login_req_entity.dart';
import 'package:meng_guo/generated/json/login_req_entity_helper.dart';
import 'package:meng_guo/function/login/entity/login_resp_entity.dart';
import 'package:meng_guo/generated/json/login_resp_entity_helper.dart';
import 'package:meng_guo/function/login/entity/register_req_entity.dart';
import 'package:meng_guo/generated/json/register_req_entity_helper.dart';
import 'package:meng_guo/function/login/entity/register_resp_entity.dart';
import 'package:meng_guo/generated/json/register_resp_entity_helper.dart';
import 'package:meng_guo/function/message/entity/message_replied_resp_entity.dart';
import 'package:meng_guo/generated/json/message_replied_resp_entity_helper.dart';
import 'package:meng_guo/function/message/entity/message_system_resp_entity.dart';
import 'package:meng_guo/generated/json/message_system_resp_entity_helper.dart';
import 'package:meng_guo/function/my/entity/my_home_resp_entity.dart';
import 'package:meng_guo/generated/json/my_home_resp_entity_helper.dart';
import 'package:meng_guo/function/publish/entity/image_resp_entity.dart';
import 'package:meng_guo/generated/json/image_resp_entity_helper.dart';
import 'package:meng_guo/function/publish/entity/publish_req_entity.dart';
import 'package:meng_guo/generated/json/publish_req_entity_helper.dart';
import 'package:meng_guo/function/publish/entity/publish_toptip_search_resp_entity.dart';
import 'package:meng_guo/generated/json/publish_toptip_search_resp_entity_helper.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case DetailCommentRespEntity:
        return detailCommentRespEntityFromJson(
            data as DetailCommentRespEntity, json) as T;
      case DetailCommentEntity:
        return detailCommentEntityFromJson(data as DetailCommentEntity, json)
            as T;
      case CommentUserEntity:
        return commentUserEntityFromJson(data as CommentUserEntity, json) as T;
      case CommentGroupEntity:
        return commentGroupEntityFromJson(data as CommentGroupEntity, json)
            as T;
      case DetailListDataEntity:
        return detailListDataEntityFromJson(data as DetailListDataEntity, json)
            as T;
      case DetailInfoRespEntity:
        return detailInfoRespEntityFromJson(data as DetailInfoRespEntity, json)
            as T;
      case DetailContentImageRealEntity:
        return detailContentImageRealEntityFromJson(
            data as DetailContentImageRealEntity, json) as T;
      case DetailContentImageBodyEntity:
        return detailContentImageBodyEntityFromJson(
            data as DetailContentImageBodyEntity, json) as T;
      case DiscoverTopTipRespEntity:
        return discoverTopTipRespEntityFromJson(
            data as DiscoverTopTipRespEntity, json) as T;
      case DiscoverTopTipEntity:
        return discoverTopTipEntityFromJson(data as DiscoverTopTipEntity, json)
            as T;
      case EmojiListRespEntity:
        return emojiListRespEntityFromJson(data as EmojiListRespEntity, json)
            as T;
      case HomeCategoryListRespEntity:
        return homeCategoryListRespEntityFromJson(
            data as HomeCategoryListRespEntity, json) as T;
      case HomeCategorySubItemEntity:
        return homeCategorySubItemEntityFromJson(
            data as HomeCategorySubItemEntity, json) as T;
      case HomeListReqEntity:
        return homeListReqEntityFromJson(data as HomeListReqEntity, json) as T;
      case HomeListRespEntity:
        return homeListRespEntityFromJson(data as HomeListRespEntity, json)
            as T;
      case HomeListDataEntity:
        return homeListDataEntityFromJson(data as HomeListDataEntity, json)
            as T;
      case HomeListDataUserEntity:
        return homeListDataUserEntityFromJson(
            data as HomeListDataUserEntity, json) as T;
      case HomeListDataGroupEntity:
        return homeListDataGroupEntityFromJson(
            data as HomeListDataGroupEntity, json) as T;
      case HomeListContentEntity:
        return homeListContentEntityFromJson(
            data as HomeListContentEntity, json) as T;
      case HomeContentImageRealEntity:
        return homeContentImageRealEntityFromJson(
            data as HomeContentImageRealEntity, json) as T;
      case HomeContentImageBodyEntity:
        return homeContentImageBodyEntityFromJson(
            data as HomeContentImageBodyEntity, json) as T;
      case HomeLikeEntity:
        return homeLikeEntityFromJson(data as HomeLikeEntity, json) as T;
      case LoginReqEntity:
        return loginReqEntityFromJson(data as LoginReqEntity, json) as T;
      case LoginRespEntity:
        return loginRespEntityFromJson(data as LoginRespEntity, json) as T;
      case RegisterReqEntity:
        return registerReqEntityFromJson(data as RegisterReqEntity, json) as T;
      case RegisterRespEntity:
        return registerRespEntityFromJson(data as RegisterRespEntity, json)
            as T;
      case MessageRepliedRespEntity:
        return messageRepliedRespEntityFromJson(
            data as MessageRepliedRespEntity, json) as T;
      case MessageRepliedPageDataEntity:
        return messageRepliedPageDataEntityFromJson(
            data as MessageRepliedPageDataEntity, json) as T;
      case MessageSystemRespEntity:
        return messageSystemRespEntityFromJson(
            data as MessageSystemRespEntity, json) as T;
      case MessageSystemPageDataEntity:
        return messageSystemPageDataEntityFromJson(
            data as MessageSystemPageDataEntity, json) as T;
      case MyHomeRespEntity:
        return myHomeRespEntityFromJson(data as MyHomeRespEntity, json) as T;
      case ImageRespEntity:
        return imageRespEntityFromJson(data as ImageRespEntity, json) as T;
      case PublishReqEntity:
        return publishReqEntityFromJson(data as PublishReqEntity, json) as T;
      case PublishInfoRespEntity:
        return publishInfoRespEntityFromJson(
            data as PublishInfoRespEntity, json) as T;
      case PublishTopTipSearchRespEntity:
        return publishTopTipSearchRespEntityFromJson(
            data as PublishTopTipSearchRespEntity, json) as T;
      case TopTipPageEntity:
        return topTipPageEntityFromJson(data as TopTipPageEntity, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case DetailCommentRespEntity:
        return detailCommentRespEntityToJson(data as DetailCommentRespEntity);
      case DetailCommentEntity:
        return detailCommentEntityToJson(data as DetailCommentEntity);
      case CommentUserEntity:
        return commentUserEntityToJson(data as CommentUserEntity);
      case CommentGroupEntity:
        return commentGroupEntityToJson(data as CommentGroupEntity);
      case DetailListDataEntity:
        return detailListDataEntityToJson(data as DetailListDataEntity);
      case DetailInfoRespEntity:
        return detailInfoRespEntityToJson(data as DetailInfoRespEntity);
      case DetailContentImageRealEntity:
        return detailContentImageRealEntityToJson(
            data as DetailContentImageRealEntity);
      case DetailContentImageBodyEntity:
        return detailContentImageBodyEntityToJson(
            data as DetailContentImageBodyEntity);
      case DiscoverTopTipRespEntity:
        return discoverTopTipRespEntityToJson(data as DiscoverTopTipRespEntity);
      case DiscoverTopTipEntity:
        return discoverTopTipEntityToJson(data as DiscoverTopTipEntity);
      case EmojiListRespEntity:
        return emojiListRespEntityToJson(data as EmojiListRespEntity);
      case HomeCategoryListRespEntity:
        return homeCategoryListRespEntityToJson(
            data as HomeCategoryListRespEntity);
      case HomeCategorySubItemEntity:
        return homeCategorySubItemEntityToJson(
            data as HomeCategorySubItemEntity);
      case HomeListReqEntity:
        return homeListReqEntityToJson(data as HomeListReqEntity);
      case HomeListRespEntity:
        return homeListRespEntityToJson(data as HomeListRespEntity);
      case HomeListDataEntity:
        return homeListDataEntityToJson(data as HomeListDataEntity);
      case HomeListDataUserEntity:
        return homeListDataUserEntityToJson(data as HomeListDataUserEntity);
      case HomeListDataGroupEntity:
        return homeListDataGroupEntityToJson(data as HomeListDataGroupEntity);
      case HomeListContentEntity:
        return homeListContentEntityToJson(data as HomeListContentEntity);
      case HomeContentImageRealEntity:
        return homeContentImageRealEntityToJson(
            data as HomeContentImageRealEntity);
      case HomeContentImageBodyEntity:
        return homeContentImageBodyEntityToJson(
            data as HomeContentImageBodyEntity);
      case HomeLikeEntity:
        return homeLikeEntityToJson(data as HomeLikeEntity);
      case LoginReqEntity:
        return loginReqEntityToJson(data as LoginReqEntity);
      case LoginRespEntity:
        return loginRespEntityToJson(data as LoginRespEntity);
      case RegisterReqEntity:
        return registerReqEntityToJson(data as RegisterReqEntity);
      case RegisterRespEntity:
        return registerRespEntityToJson(data as RegisterRespEntity);
      case MessageRepliedRespEntity:
        return messageRepliedRespEntityToJson(data as MessageRepliedRespEntity);
      case MessageRepliedPageDataEntity:
        return messageRepliedPageDataEntityToJson(
            data as MessageRepliedPageDataEntity);
      case MessageSystemRespEntity:
        return messageSystemRespEntityToJson(data as MessageSystemRespEntity);
      case MessageSystemPageDataEntity:
        return messageSystemPageDataEntityToJson(
            data as MessageSystemPageDataEntity);
      case MyHomeRespEntity:
        return myHomeRespEntityToJson(data as MyHomeRespEntity);
      case ImageRespEntity:
        return imageRespEntityToJson(data as ImageRespEntity);
      case PublishReqEntity:
        return publishReqEntityToJson(data as PublishReqEntity);
      case PublishInfoRespEntity:
        return publishInfoRespEntityToJson(data as PublishInfoRespEntity);
      case PublishTopTipSearchRespEntity:
        return publishTopTipSearchRespEntityToJson(
            data as PublishTopTipSearchRespEntity);
      case TopTipPageEntity:
        return topTipPageEntityToJson(data as TopTipPageEntity);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle<M>(json) {
    String type = M.toString();
    if (type == (DetailCommentRespEntity).toString()) {
      return DetailCommentRespEntity().fromJson(json);
    }
    if (type == (DetailCommentEntity).toString()) {
      return DetailCommentEntity().fromJson(json);
    }
    if (type == (CommentUserEntity).toString()) {
      return CommentUserEntity().fromJson(json);
    }
    if (type == (CommentGroupEntity).toString()) {
      return CommentGroupEntity().fromJson(json);
    }
    if (type == (DetailListDataEntity).toString()) {
      return DetailListDataEntity().fromJson(json);
    }
    if (type == (DetailInfoRespEntity).toString()) {
      return DetailInfoRespEntity().fromJson(json);
    }
    if (type == (DetailContentImageRealEntity).toString()) {
      return DetailContentImageRealEntity().fromJson(json);
    }
    if (type == (DetailContentImageBodyEntity).toString()) {
      return DetailContentImageBodyEntity().fromJson(json);
    }
    if (type == (DiscoverTopTipRespEntity).toString()) {
      return DiscoverTopTipRespEntity().fromJson(json);
    }
    if (type == (DiscoverTopTipEntity).toString()) {
      return DiscoverTopTipEntity().fromJson(json);
    }
    if (type == (EmojiListRespEntity).toString()) {
      return EmojiListRespEntity().fromJson(json);
    }
    if (type == (HomeCategoryListRespEntity).toString()) {
      return HomeCategoryListRespEntity().fromJson(json);
    }
    if (type == (HomeCategorySubItemEntity).toString()) {
      return HomeCategorySubItemEntity().fromJson(json);
    }
    if (type == (HomeListReqEntity).toString()) {
      return HomeListReqEntity().fromJson(json);
    }
    if (type == (HomeListRespEntity).toString()) {
      return HomeListRespEntity().fromJson(json);
    }
    if (type == (HomeListDataEntity).toString()) {
      return HomeListDataEntity().fromJson(json);
    }
    if (type == (HomeListDataUserEntity).toString()) {
      return HomeListDataUserEntity().fromJson(json);
    }
    if (type == (HomeListDataGroupEntity).toString()) {
      return HomeListDataGroupEntity().fromJson(json);
    }
    if (type == (HomeListContentEntity).toString()) {
      return HomeListContentEntity().fromJson(json);
    }
    if (type == (HomeContentImageRealEntity).toString()) {
      return HomeContentImageRealEntity().fromJson(json);
    }
    if (type == (HomeContentImageBodyEntity).toString()) {
      return HomeContentImageBodyEntity().fromJson(json);
    }
    if (type == (HomeLikeEntity).toString()) {
      return HomeLikeEntity().fromJson(json);
    }
    if (type == (LoginReqEntity).toString()) {
      return LoginReqEntity().fromJson(json);
    }
    if (type == (LoginRespEntity).toString()) {
      return LoginRespEntity().fromJson(json);
    }
    if (type == (RegisterReqEntity).toString()) {
      return RegisterReqEntity().fromJson(json);
    }
    if (type == (RegisterRespEntity).toString()) {
      return RegisterRespEntity().fromJson(json);
    }
    if (type == (MessageRepliedRespEntity).toString()) {
      return MessageRepliedRespEntity().fromJson(json);
    }
    if (type == (MessageRepliedPageDataEntity).toString()) {
      return MessageRepliedPageDataEntity().fromJson(json);
    }
    if (type == (MessageSystemRespEntity).toString()) {
      return MessageSystemRespEntity().fromJson(json);
    }
    if (type == (MessageSystemPageDataEntity).toString()) {
      return MessageSystemPageDataEntity().fromJson(json);
    }
    if (type == (MyHomeRespEntity).toString()) {
      return MyHomeRespEntity().fromJson(json);
    }
    if (type == (ImageRespEntity).toString()) {
      return ImageRespEntity().fromJson(json);
    }
    if (type == (PublishReqEntity).toString()) {
      return PublishReqEntity().fromJson(json);
    }
    if (type == (PublishInfoRespEntity).toString()) {
      return PublishInfoRespEntity().fromJson(json);
    }
    if (type == (PublishTopTipSearchRespEntity).toString()) {
      return PublishTopTipSearchRespEntity().fromJson(json);
    }
    if (type == (TopTipPageEntity).toString()) {
      return TopTipPageEntity().fromJson(json);
    }

    return null;
  }

  //list is returned by type
  static M _getListChildType<M>(List data) {
    if (<DetailCommentRespEntity>[] is M) {
      return data
          .map<DetailCommentRespEntity>(
              (e) => DetailCommentRespEntity().fromJson(e))
          .toList() as M;
    }
    if (<DetailCommentEntity>[] is M) {
      return data
          .map<DetailCommentEntity>((e) => DetailCommentEntity().fromJson(e))
          .toList() as M;
    }
    if (<CommentUserEntity>[] is M) {
      return data
          .map<CommentUserEntity>((e) => CommentUserEntity().fromJson(e))
          .toList() as M;
    }
    if (<CommentGroupEntity>[] is M) {
      return data
          .map<CommentGroupEntity>((e) => CommentGroupEntity().fromJson(e))
          .toList() as M;
    }
    if (<DetailListDataEntity>[] is M) {
      return data
          .map<DetailListDataEntity>((e) => DetailListDataEntity().fromJson(e))
          .toList() as M;
    }
    if (<DetailInfoRespEntity>[] is M) {
      return data
          .map<DetailInfoRespEntity>((e) => DetailInfoRespEntity().fromJson(e))
          .toList() as M;
    }
    if (<DetailContentImageRealEntity>[] is M) {
      return data
          .map<DetailContentImageRealEntity>(
              (e) => DetailContentImageRealEntity().fromJson(e))
          .toList() as M;
    }
    if (<DetailContentImageBodyEntity>[] is M) {
      return data
          .map<DetailContentImageBodyEntity>(
              (e) => DetailContentImageBodyEntity().fromJson(e))
          .toList() as M;
    }
    if (<DiscoverTopTipRespEntity>[] is M) {
      return data
          .map<DiscoverTopTipRespEntity>(
              (e) => DiscoverTopTipRespEntity().fromJson(e))
          .toList() as M;
    }
    if (<DiscoverTopTipEntity>[] is M) {
      return data
          .map<DiscoverTopTipEntity>((e) => DiscoverTopTipEntity().fromJson(e))
          .toList() as M;
    }
    if (<EmojiListRespEntity>[] is M) {
      return data
          .map<EmojiListRespEntity>((e) => EmojiListRespEntity().fromJson(e))
          .toList() as M;
    }
    if (<HomeCategoryListRespEntity>[] is M) {
      return data
          .map<HomeCategoryListRespEntity>(
              (e) => HomeCategoryListRespEntity().fromJson(e))
          .toList() as M;
    }
    if (<HomeCategorySubItemEntity>[] is M) {
      return data
          .map<HomeCategorySubItemEntity>(
              (e) => HomeCategorySubItemEntity().fromJson(e))
          .toList() as M;
    }
    if (<HomeListReqEntity>[] is M) {
      return data
          .map<HomeListReqEntity>((e) => HomeListReqEntity().fromJson(e))
          .toList() as M;
    }
    if (<HomeListRespEntity>[] is M) {
      return data
          .map<HomeListRespEntity>((e) => HomeListRespEntity().fromJson(e))
          .toList() as M;
    }
    if (<HomeListDataEntity>[] is M) {
      return data
          .map<HomeListDataEntity>((e) => HomeListDataEntity().fromJson(e))
          .toList() as M;
    }
    if (<HomeListDataUserEntity>[] is M) {
      return data
          .map<HomeListDataUserEntity>(
              (e) => HomeListDataUserEntity().fromJson(e))
          .toList() as M;
    }
    if (<HomeListDataGroupEntity>[] is M) {
      return data
          .map<HomeListDataGroupEntity>(
              (e) => HomeListDataGroupEntity().fromJson(e))
          .toList() as M;
    }
    if (<HomeListContentEntity>[] is M) {
      return data
          .map<HomeListContentEntity>(
              (e) => HomeListContentEntity().fromJson(e))
          .toList() as M;
    }
    if (<HomeContentImageRealEntity>[] is M) {
      return data
          .map<HomeContentImageRealEntity>(
              (e) => HomeContentImageRealEntity().fromJson(e))
          .toList() as M;
    }
    if (<HomeContentImageBodyEntity>[] is M) {
      return data
          .map<HomeContentImageBodyEntity>(
              (e) => HomeContentImageBodyEntity().fromJson(e))
          .toList() as M;
    }
    if (<HomeLikeEntity>[] is M) {
      return data
          .map<HomeLikeEntity>((e) => HomeLikeEntity().fromJson(e))
          .toList() as M;
    }
    if (<LoginReqEntity>[] is M) {
      return data
          .map<LoginReqEntity>((e) => LoginReqEntity().fromJson(e))
          .toList() as M;
    }
    if (<LoginRespEntity>[] is M) {
      return data
          .map<LoginRespEntity>((e) => LoginRespEntity().fromJson(e))
          .toList() as M;
    }
    if (<RegisterReqEntity>[] is M) {
      return data
          .map<RegisterReqEntity>((e) => RegisterReqEntity().fromJson(e))
          .toList() as M;
    }
    if (<RegisterRespEntity>[] is M) {
      return data
          .map<RegisterRespEntity>((e) => RegisterRespEntity().fromJson(e))
          .toList() as M;
    }
    if (<MessageRepliedRespEntity>[] is M) {
      return data
          .map<MessageRepliedRespEntity>(
              (e) => MessageRepliedRespEntity().fromJson(e))
          .toList() as M;
    }
    if (<MessageRepliedPageDataEntity>[] is M) {
      return data
          .map<MessageRepliedPageDataEntity>(
              (e) => MessageRepliedPageDataEntity().fromJson(e))
          .toList() as M;
    }
    if (<MessageSystemRespEntity>[] is M) {
      return data
          .map<MessageSystemRespEntity>(
              (e) => MessageSystemRespEntity().fromJson(e))
          .toList() as M;
    }
    if (<MessageSystemPageDataEntity>[] is M) {
      return data
          .map<MessageSystemPageDataEntity>(
              (e) => MessageSystemPageDataEntity().fromJson(e))
          .toList() as M;
    }
    if (<MyHomeRespEntity>[] is M) {
      return data
          .map<MyHomeRespEntity>((e) => MyHomeRespEntity().fromJson(e))
          .toList() as M;
    }
    if (<ImageRespEntity>[] is M) {
      return data
          .map<ImageRespEntity>((e) => ImageRespEntity().fromJson(e))
          .toList() as M;
    }
    if (<PublishReqEntity>[] is M) {
      return data
          .map<PublishReqEntity>((e) => PublishReqEntity().fromJson(e))
          .toList() as M;
    }
    if (<PublishInfoRespEntity>[] is M) {
      return data
          .map<PublishInfoRespEntity>(
              (e) => PublishInfoRespEntity().fromJson(e))
          .toList() as M;
    }
    if (<PublishTopTipSearchRespEntity>[] is M) {
      return data
          .map<PublishTopTipSearchRespEntity>(
              (e) => PublishTopTipSearchRespEntity().fromJson(e))
          .toList() as M;
    }
    if (<TopTipPageEntity>[] is M) {
      return data
          .map<TopTipPageEntity>((e) => TopTipPageEntity().fromJson(e))
          .toList() as M;
    }

    throw Exception("not found");
  }

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}
